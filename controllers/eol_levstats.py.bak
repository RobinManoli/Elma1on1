# -*- coding: utf-8 -*-
def index():
    return dict( stats='' )

# 54 * * * * wget -O - http://xelma.eartheart.se/eol_levstats/update_votes >/dev/null 2>&1
def update_votes():
    import urllib2
    import urllib
    import datetime
    url = 'http://elmaonline.net/chat/search'
    data = dict( Text='!lev' ) # set post data
    data = urllib.urlencode(data)
    req = urllib2.Request(url, data) 
    resp = urllib2.urlopen(req) # perform request
    html = resp.read()

    dom = TAG(html)
    votes = []
    for tr in dom.elements('tr',find='!lev'):
        voting_time = tr[1].flatten()
        voter_country_name = tr[3]['_href'][37:]
        voter_country_code = tr[3].element('img')['_src'][35:37]
        voter_nick = tr[5]['_href'][30:]
        voting_text = tr[6][2:]
        if not voting_text.lower().startswith('!lev'): continue
        votes.append( dict(voting_time=voting_time, voter_country_name=voter_country_name, voter_country_code=voter_country_code,
                           voter_nick=voter_nick, voting_text=voting_text) )

    ret = ''
    lastdate = '' # once lastdate is set, it should remain the same
    for i, vote in enumerate(votes):
        if '-' not in vote['voting_time']:
            if not i: continue # if this happen this is the first vote in the list and it does not have any date
            if not lastdate:
                lastdate = votes[i-1]['voting_time']
                if '-' not in lastdate: continue
                lastdate = lastdate[:10] # strip lastdate's time first iteration
            #return '%s %s'%(lastdate,vote['voting_time'])
            vote['voting_time'] = datetime.datetime.strptime('%s %s'%(lastdate,vote['voting_time']), '%Y-%m-%d %H:%M:%S')
            # the first time with no date should be one day after lastdate
            vote['voting_time'] += datetime.timedelta(days=1)
            # convert voting time back to string
            vote['voting_time'] = str( vote['voting_time'] )[:19]
        country = db.country(code=vote['voter_country_code'])
        if not country: country = db.country.insert( name=vote['voter_country_name'], code=vote['voter_country_code'] )
        user = db.auth_user(username=vote['voter_nick'])
        if not user: user = db.auth_user.insert( username=vote['voter_nick'], country=country )
        eol_battle = db( (db.eol_battle.started<vote['voting_time']) & (db.eol_battle.ended>vote['voting_time']) ).select(limitby=(0,1)).first()
        # if vote cast before first battle time, loop
        #return str( eol_battle.id ) +' '+ str( eol_battle.started ) +' '+ str( eol_battle.ended ) +' '+ str( vote['voting_time'] )
        if not eol_battle:
            ret += "vote at: "+ str( vote['voting_time'] ) + '<br>'
            continue
        ret += "battle " + str( eol_battle.eol_battle_id ) +': '+ str( eol_battle.started ) +' to '+ str( eol_battle.ended ) +', vote at '+ str( vote['voting_time'] )

        eol_battle_vote = db.eol_battle_vote( battle=eol_battle, voter=user )
        comment = vote['voting_text']
        if len(comment.split(' ')) > 1:
            score = comment.split(' ')[1]
            if not score.replace('-','',1).replace('.','',1).isdigit(): score = None
            else:
                score = float(score)
                if score > 9.999: score = 9.999
                if score < 0: score = 0
        #if len(comment.split(' ')) > 1 and comment.split(' ')[1].replace('.','',1).isdigit():
        #    score = comment.split(' ')[1]
        #else: score = None
        if len(comment.split(' ')) < 3: comment = None

        #return str( eol_battle.id ) +' '+ str(comment)  +' '+ str(score)
        ret +=  ', comment: '+str(comment)  +', score: '+ str(score) + ', user:' + str(user.username) + '<br>'

        if not eol_battle_vote:
            db.eol_battle_vote.insert( score=score, comment=comment, voting_time=vote['voting_time'], voter=user, battle=eol_battle )
        elif not eol_battle_vote.score and score: eol_battle_vote.update_record( score=score, voting_time=vote['voting_time'] )
        elif not eol_battle_vote.comment and comment: eol_battle_vote.update_record( comment=comment )
        # todo: cleanup unvoted levels and add score to battles
    return ret#str(votes)#BEAUTIFY( votes )

# updates database with new battles, root 51 * * * * wget -O - http://xelma.eartheart.se/eol_levstats/update_battles >/dev/null 2>&1
def update_battles():
    import datetime
    #import urllib2
    import urllib
    # get times from yesterday, and tomorrow, since server clock is finnish time, and doesn't fetch anything at 00:37 swedish time
    yesterday = datetime.date.today() - datetime.timedelta(days=1)
    today = datetime.date.today()
    tomorrow = today + datetime.timedelta(days=1)
    url = 'http://elmaonline.net/battles/search/All/1/1/1/1/1/1/1/1/1/1/0/99/%s/%s' % (str(yesterday), str(tomorrow))
    html = urllib.urlopen(url).read()

    db()
    battles = []
    dom = TAG(html)
    #return "%s %s" %( dom, url )
    # parse battles
    for tr in dom.elements('tr'):
        a = tr.elements('a')
        # parse links
        if len(a) > 2: # if the winner (or perhaps designer) has no eol user, there might be only 3 links
            battle_id = a[0]['_href'][30:] # stripping href such as: http://elmaonline.net/battles/67505
            battle_start = a[0].flatten()
            # if - is in the time format there will be only date, not time
            if "-" in battle_start:
                url2 = a[0]['_href']
                # so fetch the battle page to get time
                html2 = urllib.urlopen(url2).read()
                dom2 = TAG(html2)
                battle_start_full_string = dom2.element('div#leftdouble')[2]
                battle_start_datetime = datetime.datetime.strptime(battle_start_full_string, '%B %d %Y %H:%M')
                #battle_start = "%02d:%02d:00" % ( battle_start_datetime.hour, battle_start_datetime.minute )
            else:
                battle_start_datetime = None
            level_id = a[1]['_href'][36:] # stripping href such as: http://elmaonline.net/downloads/lev/259870
            level_filename = a[1].flatten()
            i = 2
            # if next link is flag (maybe some players have no flag?)
            if a[i]['_href'].startswith('http://elmaonline.net/players/nation/'):
                designer_country_name = a[i]['_href'][37:]
                designer_country_code = a[i].element('img')['_src'][35:37]
                i += 1
            else:
                designer_country_name = None
                designer_country_code = None
            # if next link is player (at least a winner can have no link, see http://elmaonline.net/battles/67532 and http://elmaonline.net/battles/67531)
            if len(a) > 2 and a[i]['_href'].startswith('http://elmaonline.net/players/'):
                designer_nick = a[i]['_href'][30:]
                i += 1
            else:
                designer_nick = None
            # next link may or may not be a team
            if len(a) > 3 and a[i]['_href'].startswith("http://elmaonline.net/players/team/"):
               designer_team = a[i]['_href'][35:]
               i += 1
            else:
                designer_team = ''
            # winner html, may not work anymore
            """if len(a) > 4:
                winner_html = str(a[i]) +" "+ str(a[i+1])
            # link i+2 may or may not be a team
            if len(a) > 5 and a[i+2]['_href'].startswith("http://elmaonline.net/players/team/"):
                winner_html += " " + str(a[i+2])
                i += 1
            winning_time = str(a[i+2])"""
            battles.append( dict(battle_id=battle_id, level_id=level_id, battle_start=battle_start, level_filename=level_filename,
                            designer_country_name=designer_country_name, designer_country_code=designer_country_code,
                            designer_nick=designer_nick, designer_team=designer_team, battle_start_datetime=battle_start_datetime )  )

    lastdate = ''
    # insert new battles into database
    battles = battles[::-1] # reverse list
    for i, battle in enumerate( battles ):
        eol_battle = db.eol_battle(eol_level_id=battle['level_id'])

        # the battle start time is a clock timestamp only, the day after lastdate
        # this code only works in this loop (not dom loop above), as it has reversed the reading it can create new times without first battle with date format
        if not battle['battle_start_datetime']:
            if not i:
                # in the rare case all 100 battles from eol battle search are today with timestamp only (could get date from db instead of continue)
                continue
            if not lastdate:
                lastdate = battles[i-1]['battle_start_datetime']
                lastdate = str( lastdate+datetime.timedelta(+1) )[:10] # strip lastdate's time first iteration
            battle['battle_start_datetime'] = datetime.datetime.strptime('%s %s'%(lastdate,battle['battle_start']), '%Y-%m-%d %H:%M:%S')
            #return str( 'last battle start: %s, new datetime: %s' %(battles[i-1]['battle_start_datetime'],battle['battle_start_datetime']) )

        if not eol_battle:
            country = db.country(code=battle['designer_country_code'])
            if not country: country = db.country.insert( name=battle['designer_country_name'], code=battle['designer_country_code'] )
            user = db.auth_user(username=battle['designer_nick'])
            if not user: user = db.auth_user.insert( username=battle['designer_nick'], country=country, team=battle['designer_team'] )
            # if user has been fetched from chat the team is not fetched -- or if user has removed team, update that too
            if (not user.team and battle['designer_team']) or (user.team and not battle['designer_team']):
                user.update_record( team=battle['designer_team'] )
            eol_battle = db.eol_battle.insert( eol_battle_id=int(battle['battle_id']), eol_level_id=int(battle['level_id']), designer=user,
                                  level_filename=battle['level_filename'], started=battle['battle_start_datetime'] )
        # since started time might be complex to get, always get ended time from next battle start
        if not eol_battle.ended:
            eol_battle_next = db( db.eol_battle.eol_battle_id > eol_battle.eol_battle_id ).select( orderby=db.eol_battle.eol_battle_id ).first()
            if eol_battle_next: eol_battle.update_record( ended=eol_battle_next.started, started=battle['battle_start_datetime'] )
        #response.write( str(eol_battle) )
    return BEAUTIFY(battles) #str( battles )
